using ExcelTasks.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;

namespace ExcelTasks.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IActionResult Index()
        {
            List<Product> outputList = new List<Product>();

            return View(outputList);
        }

        [HttpPost]
        public IActionResult Index(IFormFile file)
        {
            List<GetData> inputList = new List<GetData>();
            List<Product> outputList = new List<Product>();
            List<Stock> stocks= new List<Stock>();
           
            int saleCount = 0;
            int purchaseCount = 0;
            using (var stream = new MemoryStream())
            {
                file.CopyTo(stream);
                using (var package = new ExcelPackage(stream))
                {
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
                    var rowCount = worksheet.Dimension.Rows;

                    for (int row = 2; row <= rowCount; row++)
                    {
                        inputList.Add(new GetData
                        {
                            ProductCode = worksheet.Cells[row, 1].Value.ToString(),
                            EventType = int.Parse(worksheet.Cells[row, 2].Value.ToString()),
                            Qty = int.Parse(worksheet.Cells[row, 3].Value.ToString()),
                            Price = double.Parse(worksheet.Cells[row, 4].Value.ToString()),
                            Date = DateTime.Parse(worksheet.Cells[row, 5].Value.ToString())
                        });
                    }

                }
            }
            var output = inputList.GroupBy(p => new { p.Date.Month});
            double openingMonthQty = 0;
            foreach (var group in output)
            {
                double profitLoss = 0;
                var productWiseGrouping = group.GroupBy(a => new {a.ProductCode});
                string productMonth="";
                foreach (var data in productWiseGrouping)
                {
                    double totalPurchaseQty = 0;
                    double totalPurchaseAmt = 0;
                    double totalSaleQty = 0;
                    double totalSaleAmt = 0;
                    purchaseCount = 0;
                    saleCount= 0;
                    int closingQty = 0;
                    double purchaseQty = 0;
                    double saleQty = 0;
                    double purchasePrice= 0.0;
                    double salePrice = 0;
                    foreach (var row in data)
                    {
                        Stock productDetails = (Stock)stocks.FirstOrDefault(x=>x.ProductCode==row.ProductCode);
                        if (productDetails != null)
                        {
                            openingMonthQty = productDetails.ClosingStock;
                        }
                        productMonth = row.Date.ToString("MMMM/yyyy");

                        if (row.EventType == 1)
                        {
                            totalPurchaseQty += row.Qty;
                            purchaseQty += row.Qty;
                            purchaseCount++;
                            purchasePrice += row.Price;                            
                        }
                        else if (row.EventType == 2)
                        {
                            totalSaleQty += row.Qty;
                            saleQty+= row.Qty;
                            salePrice += row.Price;
                            saleCount++;
                        }
                        closingQty = (int)(totalPurchaseQty - totalSaleQty + openingMonthQty);
                    }
                    if (purchaseCount != 0)
                    {
                        purchasePrice = purchasePrice / purchaseCount;
                    }
                    if (saleCount != 0)
                    {
                        salePrice = salePrice / saleCount;
                    }
                    Stock productToUpdate = (Stock)stocks.FirstOrDefault(x => x.ProductCode == data.Key.ProductCode);
                    if (productToUpdate != null)
                    {
                        if (purchasePrice != 0)
                        {
                            profitLoss = (totalSaleQty * salePrice) - (totalSaleQty * ((productToUpdate.ClosingPrice+purchasePrice)/2));

                        }
                        else
                        {
                            profitLoss = (totalSaleQty * salePrice) - (totalSaleQty * productToUpdate.ClosingPrice);
                        }
                        if (purchasePrice != 0)
                        {
                            productToUpdate.ClosingPrice = purchasePrice;


                            productToUpdate.ClosingStock = closingQty;
                        }
                    }
                    else
                    {
                        stocks.Add(new Stock
                        {
                            ProductCode = data.Key.ProductCode,
                            ClosingStock = closingQty,
                            ClosingPrice = purchasePrice,
                        });
                        profitLoss = (totalSaleQty * salePrice) - (totalSaleQty * purchasePrice);

                    }
                   
                    totalSaleAmt = saleQty * salePrice;
                    totalPurchaseAmt = purchaseQty * purchasePrice;

                   
                    if (purchaseCount == 0)
                    {
                        totalPurchaseQty = 0;
                        totalPurchaseAmt = 0;
                    }
                    if (saleCount == 0)
                    {
                        totalSaleAmt = 0;
                        totalSaleQty = 0;
                    }
                    outputList.Add(new Product
                    {
                        ProductCode = data.Key.ProductCode,
                        TotalPurchaseQty = totalPurchaseQty,
                        ProfitLoss = (long)profitLoss,
                        ProductPrice = purchasePrice,
                        TotalPurchaseAmt = (long?)totalPurchaseAmt,
                        TotalSaleAmt = (long?)totalSaleAmt,
                        TotalSaleQty = (long?)totalSaleQty,
                        ClosingQty = closingQty,
                        Month = productMonth,
                        OpeningQty = openingMonthQty,
                        ProductSellPrice = salePrice
                    }) ;
                }  
            }
            return View(outputList);
        }
   
        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}